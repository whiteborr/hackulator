# app/pages/web_exploits_page_refactored.py
import logging
from PyQt6.QtWidgets import (QWidget, QPushButton, QLabel, QLineEdit, QTextEdit, 
                            QVBoxLayout, QHBoxLayout, QFrame)
from PyQt6.QtCore import pyqtSignal, QThreadPool
from PyQt6.QtGui import QShortcut, QKeySequence
from app.core.base_worker import CommandWorker

class WebExploitsPage(QWidget):
    navigate_signal = pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.setObjectName("WebExploitsPage")

        # Create main layout
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        self.main_layout.setSpacing(15)

        # Header
        self.create_header()
        
        # Content area
        self.create_content_area()
        
        self.setup_shortcuts()
        self.apply_theme()

    def create_header(self):
        header_frame = QFrame()
        header_frame.setFixedHeight(60)
        header_layout = QHBoxLayout(header_frame)
        
        self.back_button = QPushButton("‚Üê Back to Home")
        self.back_button.clicked.connect(lambda: self.navigate_signal.emit("home"))
        self.back_button.setFixedWidth(150)
        
        title = QLabel("Web & App Exploits")
        title.setObjectName("TitleLabel")
        
        header_layout.addWidget(self.back_button)
        header_layout.addWidget(title, 1)
        header_layout.addStretch()
        
        self.main_layout.addWidget(header_frame)

    def create_content_area(self):
        content_layout = QHBoxLayout()
        
        # Left panel - controls
        left_panel = self.create_left_panel()
        content_layout.addWidget(left_panel, 0)
        
        # Right panel - output
        right_panel = self.create_right_panel()
        content_layout.addWidget(right_panel, 1)
        
        self.main_layout.addLayout(content_layout)

    def create_left_panel(self):
        panel = QFrame()
        panel.setFixedWidth(200)
        layout = QVBoxLayout(panel)
        
        # Input controls
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("http://example.com")
        layout.addWidget(QLabel("Target URL:"))
        layout.addWidget(self.target_input)
        
        self.param_input = QLineEdit()
        self.param_input.setPlaceholderText("page, id")
        layout.addWidget(QLabel("Parameter:"))
        layout.addWidget(self.param_input)
        
        layout.addWidget(QLabel("Exploit Tests:"))
        
        # Exploit buttons
        buttons = [
            ("XSS Test", self.test_xss),
            ("LFI/RFI", self.test_lfi),
            ("Directory Traversal", self.test_directory_traversal),
            ("Command Injection", self.test_command_injection),
            ("CSRF Tokens", self.extract_csrf_tokens),
            ("All Tests", self.test_all_exploits)
        ]
        
        self.exploit_buttons = []
        for text, method in buttons:
            btn = QPushButton(text)
            btn.clicked.connect(method)
            btn.setMinimumHeight(35)
            layout.addWidget(btn)
            self.exploit_buttons.append(btn)
        
        layout.addStretch()
        return panel

    def create_right_panel(self):
        panel = QFrame()
        layout = QVBoxLayout(panel)
        
        self.terminal_output = QTextEdit()
        self.terminal_output.setReadOnly(True)
        self.terminal_output.setPlaceholderText("Web exploit test results will appear here...")
        layout.addWidget(self.terminal_output)
        
        return panel

    def apply_theme(self):
        self.setStyleSheet("""
            QFrame {
                background-color: rgba(0, 0, 0, 100);
                border-radius: 10px;
                border: 1px solid rgba(100, 200, 255, 50);
            }
            QPushButton {
                background-color: rgba(30, 40, 50, 150);
                border: 2px solid rgba(100, 200, 255, 100);
                border-radius: 8px;
                color: #DCDCDC;
                font-weight: bold;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: rgba(50, 70, 90, 200);
                border: 2px solid #64C8FF;
            }
            QLineEdit {
                background-color: rgba(20, 30, 40, 150);
                border: 2px solid rgba(100, 200, 255, 100);
                border-radius: 5px;
                color: #DCDCDC;
                padding: 5px;
            }
            QLabel {
                color: #64C8FF;
                font-weight: bold;
            }
        """)

    def test_xss(self):
        cmd = ["python", "tools/web_exploits.py", "--xss"]
        self.run_exploit_command(cmd, "Testing for XSS vulnerabilities")

    def test_lfi(self):
        cmd = ["python", "tools/web_exploits.py", "--lfi", "--rfi"]
        self.run_exploit_command(cmd, "Testing for LFI/RFI vulnerabilities")

    def test_directory_traversal(self):
        param = self.param_input.text().strip() or "page"
        cmd = ["python", "tools/web_exploits.py", "--dir-traversal"]
        self.run_exploit_command(cmd, f"Testing directory traversal on parameter '{param}'")

    def test_command_injection(self):
        cmd = ["python", "tools/web_exploits.py", "--cmd-inject"]
        self.run_exploit_command(cmd, "Testing for command injection vulnerabilities")

    def extract_csrf_tokens(self):
        cmd = ["python", "tools/web_exploits.py", "--csrf-tokens"]
        self.run_exploit_command(cmd, "Extracting CSRF tokens and nonces")

    def test_all_exploits(self):
        cmd = ["python", "tools/web_exploits.py", "--all"]
        self.run_exploit_command(cmd, "Running comprehensive web exploit tests")

    def run_exploit_command(self, cmd, description):
        target = self.target_input.text().strip()
        if not target:
            self.show_error("Please enter a target URL")
            return
        self.terminal_output.clear()
        self.set_buttons_enabled(False)
        full_cmd = cmd + [target]
        worker = CommandWorker(full_cmd, description, str(self.main_window.project_root))
        worker.signals.output.connect(self.append_terminal_output)
        worker.signals.finished.connect(lambda: self.set_buttons_enabled(True))
        QThreadPool.globalInstance().start(worker)

    def show_error(self, message):
        self.terminal_output.setHtml(f"<p style='color: #FF4500;'>[ERROR] {message}</p>")

    def append_terminal_output(self, text):
        self.terminal_output.insertHtml(text)
        scrollbar = self.terminal_output.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def set_buttons_enabled(self, enabled):
        for button in self.exploit_buttons:
            button.setEnabled(enabled)

    def setup_shortcuts(self):
        self.back_shortcut = QShortcut(QKeySequence("Escape"), self)
        self.back_shortcut.activated.connect(lambda: self.navigate_signal.emit("home"))
        self.clear_shortcut = QShortcut(QKeySequence("Ctrl+L"), self)
        self.clear_shortcut.activated.connect(lambda: self.terminal_output.clear())