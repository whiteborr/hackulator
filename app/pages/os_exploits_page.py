# app/pages/os_exploits_page.py
import logging
from PyQt6.QtWidgets import QWidget, QPushButton, QLabel, QLineEdit, QTextEdit, QComboBox
from PyQt6.QtCore import pyqtSignal, QSize, Qt, QThreadPool
from PyQt6.QtGui import QPixmap, QIcon, QShortcut, QKeySequence
from app.core.base_worker import CommandWorker

class OSExploitsPage(QWidget):
    navigate_signal = pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.setObjectName("OSExploitsPage")

        self.background_label = QLabel(self)
        self.background_label.setScaledContents(True)

        # --- Create UI Elements ---
        self.title = QLabel("OS Exploits", self)
        self.title.setObjectName("TitleLabel")
        
        self.back_button = QPushButton("< Back", self)
        self.back_button.setProperty("class", "backButton")
        self.back_button.clicked.connect(lambda: self.navigate_signal.emit("home"))
        
        self.target_input = QLineEdit(self)
        self.target_input.setObjectName("TargetInput")
        self.target_input.setPlaceholderText("Enter target IP (or localhost)")
        
        self.lhost_input = QLineEdit(self)
        self.lhost_input.setObjectName("TargetInput")
        self.lhost_input.setPlaceholderText("LHOST (for reverse shells)")
        
        self.lport_input = QLineEdit(self)
        self.lport_input.setObjectName("TargetInput")
        self.lport_input.setPlaceholderText("LPORT")

        self.terminal_output = QTextEdit(self)
        self.terminal_output.setObjectName("InfoPanel")
        self.terminal_output.setReadOnly(True)

        # --- OS Exploit Tool Buttons ---
        self.os_buttons_data = [
            {"id": "win_services", "text": "WIN SERVICES", "rect": (135, 225, 105, 30)},
            {"id": "win_tasks", "text": "SCHED TASKS", "rect": (135, 283, 105, 30)},
            {"id": "dll_hijack", "text": "DLL HIJACK", "rect": (135, 341, 105, 30)},
            {"id": "mimikatz", "text": "MIMIKATZ", "rect": (135, 398, 105, 30)},
            {"id": "linux_privesc", "text": "LINUX PRIVESC", "rect": (135, 458, 105, 30)},
            {"id": "reverse_shells", "text": "REV SHELLS", "rect": (135, 518, 105, 30)},
        ]

        self.os_buttons = []
        for button_data in self.os_buttons_data:
            button = QPushButton(button_data["text"], self)
            button.setProperty("class", "dnsToolButton")
            
            if button_data["id"] == "win_services":
                button.clicked.connect(self.enum_windows_services)
            elif button_data["id"] == "win_tasks":
                button.clicked.connect(self.enum_scheduled_tasks)
            elif button_data["id"] == "dll_hijack":
                button.clicked.connect(self.check_dll_hijacking)
            elif button_data["id"] == "mimikatz":
                button.clicked.connect(self.show_mimikatz_commands)
            elif button_data["id"] == "linux_privesc":
                button.clicked.connect(self.linux_privilege_escalation)
            elif button_data["id"] == "reverse_shells":
                button.clicked.connect(self.generate_reverse_shells)
                
            self.os_buttons.append(button)

        self.setup_shortcuts()
        self.resizeEvent(None)
        self.apply_theme()
        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)

    def resizeEvent(self, event):
        if event: super().resizeEvent(event)
        
        self.background_label.setGeometry(0, 0, self.width(), self.height())
        
        new_size = self.main_window.size()
        original_size = self.main_window.original_size
        ws = new_size.width() / original_size.width()
        hs = new_size.height() / original_size.height()

        self.title.setGeometry(int(340 * ws), int(40 * hs), int(400 * ws), int(50 * hs))
        self.back_button.setGeometry(int(20 * ws), int(20 * hs), int(150 * ws), int(50 * hs))
        
        term_x, term_y, term_w, term_h = 340, 175, 1731 - 340, 770 - 175
        self.terminal_output.setGeometry(term_x, term_y, term_w, term_h)

        controls_y = term_y + term_h + 20
        control_height = 36
        
        self.target_input.setGeometry(term_x, controls_y, 200, control_height)
        self.lhost_input.setGeometry(term_x + 220, controls_y, 150, control_height)
        self.lport_input.setGeometry(term_x + 390, controls_y, 100, control_height)

        for i, button in enumerate(self.os_buttons):
            x, y, w, h = self.os_buttons_data[i]["rect"]
            button.setGeometry(x, y, w, h)

    def apply_theme(self):
        theme = self.main_window.theme_manager
        bg_path = theme.get("backgrounds.enumeration")
        if bg_path: self.background_label.setPixmap(QPixmap(bg_path))

    def append_terminal_output(self, text):
        self.terminal_output.insertHtml(text)
        self.terminal_output.verticalScrollBar().setValue(self.terminal_output.verticalScrollBar().maximum())

    def set_buttons_enabled(self, enabled):
        for button in self.os_buttons:
            button.setEnabled(enabled)

    def show_error(self, message):
        self.terminal_output.setHtml(f"<p style='color: #FF4500;'>[ERROR] {message}</p>")

    def run_os_command(self, cmd, description):
        target = self.target_input.text().strip() or "localhost"
        
        self.terminal_output.clear()
        self.set_buttons_enabled(False)
        
        full_cmd = cmd + [target]
        worker = CommandWorker(full_cmd, description, str(self.main_window.project_root))
        worker.signals.output.connect(self.append_terminal_output)
        worker.signals.error.connect(self.append_terminal_output)
        worker.signals.finished.connect(lambda: self.set_buttons_enabled(True))
        QThreadPool.globalInstance().start(worker)

    def enum_windows_services(self):
        cmd = ["python", "tools/os_exploits.py", "--windows-services"]
        self.run_os_command(cmd, "Enumerating Windows services for privilege escalation")

    def enum_scheduled_tasks(self):
        cmd = ["python", "tools/os_exploits.py", "--windows-tasks"]
        self.run_os_command(cmd, "Enumerating Windows scheduled tasks")

    def check_dll_hijacking(self):
        cmd = ["python", "tools/os_exploits.py", "--dll-hijacking"]
        self.run_os_command(cmd, "Checking for DLL hijacking opportunities")

    def show_mimikatz_commands(self):
        cmd = ["python", "tools/os_exploits.py", "--mimikatz"]
        self.run_os_command(cmd, "Displaying Mimikatz credential extraction commands")

    def linux_privilege_escalation(self):
        cmd = ["python", "tools/os_exploits.py", "--linux-privesc", "--linux-cron"]
        self.run_os_command(cmd, "Linux privilege escalation enumeration")

    def generate_reverse_shells(self):
        lhost = self.lhost_input.text().strip()
        lport = self.lport_input.text().strip()
        
        if not lhost or not lport:
            return self.show_error("Please enter LHOST and LPORT for reverse shells")
        
        target = self.target_input.text().strip() or "localhost"
        
        self.terminal_output.clear()
        self.set_buttons_enabled(False)
        
        cmd = ["python", "tools/os_exploits.py", target, "--reverse-shell", f"{lhost}:{lport}"]
        worker = CommandWorker(cmd, f"Generating reverse shell payloads for {lhost}:{lport}", str(self.main_window.project_root))
        worker.signals.output.connect(self.append_terminal_output)
        worker.signals.error.connect(self.append_terminal_output)
        worker.signals.finished.connect(lambda: self.set_buttons_enabled(True))
        QThreadPool.globalInstance().start(worker)

    def setup_shortcuts(self):
        self.clear_shortcut = QShortcut(QKeySequence("Ctrl+L"), self)
        self.clear_shortcut.activated.connect(self.clear_terminal)
        
        self.back_shortcut = QShortcut(QKeySequence("Escape"), self)
        self.back_shortcut.activated.connect(lambda: self.navigate_signal.emit("home"))
    
    def clear_terminal(self):
        self.terminal_output.clear()