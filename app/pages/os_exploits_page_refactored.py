# app/pages/os_exploits_page_refactored.py
from PyQt6.QtWidgets import (QWidget, QPushButton, QLabel, QLineEdit, QTextEdit, 
                            QVBoxLayout, QHBoxLayout, QFrame)
from PyQt6.QtCore import pyqtSignal, QThreadPool
from PyQt6.QtGui import QShortcut, QKeySequence
from app.core.base_worker import CommandWorker

class OSExploitsPage(QWidget):
    navigate_signal = pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.setObjectName("OSExploitsPage")

        self.main_layout = QVBoxLayout(self)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        self.main_layout.setSpacing(15)

        self.create_header()
        self.create_content_area()
        self.setup_shortcuts()
        self.apply_theme()

    def create_header(self):
        header_frame = QFrame()
        header_frame.setFixedHeight(60)
        header_layout = QHBoxLayout(header_frame)
        
        self.back_button = QPushButton("‚Üê Back to Home")
        self.back_button.clicked.connect(lambda: self.navigate_signal.emit("home"))
        self.back_button.setFixedWidth(150)
        
        title = QLabel("OS Exploits")
        title.setObjectName("TitleLabel")
        
        header_layout.addWidget(self.back_button)
        header_layout.addWidget(title, 1)
        header_layout.addStretch()
        
        self.main_layout.addWidget(header_frame)

    def create_content_area(self):
        content_layout = QHBoxLayout()
        
        left_panel = self.create_left_panel()
        content_layout.addWidget(left_panel, 0)
        
        right_panel = self.create_right_panel()
        content_layout.addWidget(right_panel, 1)
        
        self.main_layout.addLayout(content_layout)

    def create_left_panel(self):
        panel = QFrame()
        panel.setFixedWidth(200)
        layout = QVBoxLayout(panel)
        
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("Target IP (localhost)")
        layout.addWidget(QLabel("Target:"))
        layout.addWidget(self.target_input)
        
        self.lhost_input = QLineEdit()
        self.lhost_input.setPlaceholderText("LHOST for shells")
        layout.addWidget(QLabel("LHOST:"))
        layout.addWidget(self.lhost_input)
        
        self.lport_input = QLineEdit()
        self.lport_input.setPlaceholderText("LPORT")
        layout.addWidget(QLabel("LPORT:"))
        layout.addWidget(self.lport_input)
        
        layout.addWidget(QLabel("Exploit Types:"))
        
        buttons = [
            ("Windows Services", self.enum_windows_services),
            ("Scheduled Tasks", self.enum_scheduled_tasks),
            ("DLL Hijacking", self.check_dll_hijacking),
            ("Mimikatz", self.show_mimikatz_commands),
            ("Linux PrivEsc", self.linux_privilege_escalation),
            ("Reverse Shells", self.generate_reverse_shells)
        ]
        
        self.os_buttons = []
        for text, method in buttons:
            btn = QPushButton(text)
            btn.clicked.connect(method)
            btn.setMinimumHeight(35)
            layout.addWidget(btn)
            self.os_buttons.append(btn)
        
        layout.addStretch()
        return panel

    def create_right_panel(self):
        panel = QFrame()
        layout = QVBoxLayout(panel)
        
        self.terminal_output = QTextEdit()
        self.terminal_output.setReadOnly(True)
        self.terminal_output.setPlaceholderText("OS exploit results will appear here...")
        layout.addWidget(self.terminal_output)
        
        return panel

    def apply_theme(self):
        self.setStyleSheet("""
            QFrame {
                background-color: rgba(0, 0, 0, 100);
                border-radius: 10px;
                border: 1px solid rgba(100, 200, 255, 50);
            }
            QPushButton {
                background-color: rgba(30, 40, 50, 150);
                border: 2px solid rgba(100, 200, 255, 100);
                border-radius: 8px;
                color: #DCDCDC;
                font-weight: bold;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: rgba(50, 70, 90, 200);
                border: 2px solid #64C8FF;
            }
            QLineEdit {
                background-color: rgba(20, 30, 40, 150);
                border: 2px solid rgba(100, 200, 255, 100);
                border-radius: 5px;
                color: #DCDCDC;
                padding: 5px;
            }
            QLabel {
                color: #64C8FF;
                font-weight: bold;
            }
        """)

    def enum_windows_services(self):
        cmd = ["python", "tools/os_exploits.py", "--windows-services"]
        self.run_os_command(cmd, "Enumerating Windows services for privilege escalation")

    def enum_scheduled_tasks(self):
        cmd = ["python", "tools/os_exploits.py", "--windows-tasks"]
        self.run_os_command(cmd, "Enumerating Windows scheduled tasks")

    def check_dll_hijacking(self):
        cmd = ["python", "tools/os_exploits.py", "--dll-hijacking"]
        self.run_os_command(cmd, "Checking for DLL hijacking opportunities")

    def show_mimikatz_commands(self):
        cmd = ["python", "tools/os_exploits.py", "--mimikatz"]
        self.run_os_command(cmd, "Displaying Mimikatz credential extraction commands")

    def linux_privilege_escalation(self):
        cmd = ["python", "tools/os_exploits.py", "--linux-privesc", "--linux-cron"]
        self.run_os_command(cmd, "Linux privilege escalation enumeration")

    def generate_reverse_shells(self):
        lhost = self.lhost_input.text().strip()
        lport = self.lport_input.text().strip()
        if not lhost or not lport:
            self.show_error("Please enter LHOST and LPORT for reverse shells")
            return
        target = self.target_input.text().strip() or "localhost"
        self.terminal_output.clear()
        self.set_buttons_enabled(False)
        cmd = ["python", "tools/os_exploits.py", target, "--reverse-shell", f"{lhost}:{lport}"]
        worker = CommandWorker(cmd, f"Generating reverse shell payloads for {lhost}:{lport}", str(self.main_window.project_root))
        worker.signals.output.connect(self.append_terminal_output)
        worker.signals.finished.connect(lambda: self.set_buttons_enabled(True))
        QThreadPool.globalInstance().start(worker)

    def run_os_command(self, cmd, description):
        target = self.target_input.text().strip() or "localhost"
        self.terminal_output.clear()
        self.set_buttons_enabled(False)
        full_cmd = cmd + [target]
        worker = CommandWorker(full_cmd, description, str(self.main_window.project_root))
        worker.signals.output.connect(self.append_terminal_output)
        worker.signals.finished.connect(lambda: self.set_buttons_enabled(True))
        QThreadPool.globalInstance().start(worker)

    def show_error(self, message):
        self.terminal_output.setHtml(f"<p style='color: #FF4500;'>[ERROR] {message}</p>")

    def append_terminal_output(self, text):
        self.terminal_output.insertHtml(text)
        scrollbar = self.terminal_output.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())

    def set_buttons_enabled(self, enabled):
        for button in self.os_buttons:
            button.setEnabled(enabled)

    def setup_shortcuts(self):
        self.back_shortcut = QShortcut(QKeySequence("Escape"), self)
        self.back_shortcut.activated.connect(lambda: self.navigate_signal.emit("home"))
        self.clear_shortcut = QShortcut(QKeySequence("Ctrl+L"), self)
        self.clear_shortcut.activated.connect(lambda: self.terminal_output.clear())